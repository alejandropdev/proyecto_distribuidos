@startuml
!theme plain
title Diagrama de Secuencia - Inicialización del Sistema Distribuido

skinparam sequence {
  BackgroundColor LightBlue
  BorderColor DarkBlue
  ArrowColor DarkGreen
  LifeLineBackgroundColor LightYellow
  LifeLineBorderColor DarkOrange
}

participant "Docker\nCompose" as DC
participant "Gestor de\nCarga" as GC
participant "Actor\nDevolución" as AD
participant "Actor\nRenovación" as AR
participant "Proceso\nSolicitante" as PS
participant "Red\nDocker" as NET

== Fase 1: Levantamiento de Contenedores ==

DC -> DC : docker compose up --build -d
DC -> GC : create container "gc"
DC -> AD : create container "actor_dev"
DC -> AR : create container "actor_ren"
DC -> PS : create container "ps"

note over DC
**Contenedores creados**
Imagen Docker construida
Volúmenes montados
end note

== Fase 2: Configuración de Red ==

DC -> NET : create network "red_distribuida"
GC -> NET : attach to network
AD -> NET : attach to network
AR -> NET : attach to network
PS -> NET : attach to network

note over NET
**Red Docker configurada**
Bridge network activa
Comunicación entre contenedores
end note

== Fase 3: Inicialización de Servicios ==

GC -> GC : __init__()
GC -> GC : inicializar_sockets()
GC -> GC : rep_socket.bind("tcp://0.0.0.0:5001")
GC -> GC : pub_socket.bind("tcp://0.0.0.0:5002")
GC -> GC : time.sleep(1)

note over GC
**Gestor de Carga activo**
Puerto 5001: REQ/REP
Puerto 5002: PUB/SUB
Esperando solicitudes
end note

AD -> AD : __init__("data/libros.json")
AD -> AD : conectar_gestor_carga()
AD -> NET : sub_socket.connect("tcp://gc:5002")
AD -> AD : sub_socket.setsockopt(zmq.SUBSCRIBE, b"devolucion")
AD -> AD : time.sleep(2)

note over AD
**Actor Devolución activo**
Suscrito a topic "devolucion"
Esperando eventos
end note

AR -> AR : __init__("data/libros.json")
AR -> AR : conectar_gestor_carga()
AR -> NET : sub_socket.connect("tcp://gc:5002")
AR -> AR : sub_socket.setsockopt(zmq.SUBSCRIBE, b"renovacion")
AR -> AR : time.sleep(2)

note over AR
**Actor Renovación activo**
Suscrito a topic "renovacion"
Esperando eventos
end note

== Fase 4: Preparación del Cliente ==

PS -> PS : __init__()
PS -> PS : conectar_gestor_carga()
PS -> NET : req_socket.connect("tcp://gc:5001")
PS -> PS : time.sleep(2)

note over PS
**Cliente preparado**
Conectado al GC
Listo para enviar solicitudes
end note

== Fase 5: Sistema Listo ==

GC -> GC : log("Gestor de Carga iniciado correctamente")
GC -> GC : log("Esperando solicitudes en puerto 5001...")
GC -> GC : log("Listo para publicar eventos en puerto 5002...")

AD -> AD : log("Actor de Devolución iniciado correctamente")
AD -> AD : log("Esperando eventos de devolución...")

AR -> AR : log("Actor de Renovación iniciado correctamente")
AR -> AR : log("Esperando eventos de renovación...")

note over PS,AR
**Sistema completamente inicializado**
Todos los componentes activos
Listo para procesar solicitudes
end note

@enduml