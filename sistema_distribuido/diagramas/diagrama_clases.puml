@startuml
!theme plain
title Diagrama de Clases - Sistema Distribuido de Préstamo de Libros

skinparam class {
  BackgroundColor LightBlue
  BorderColor DarkBlue
}
skinparam note {
  BackgroundColor LightYellow
  BorderColor Orange
}

' ===================== Clases Principales =====================

class GestorCarga {
  - context: zmq.Context
  - rep_socket: zmq.Socket
  - pub_socket: zmq.Socket
  - contador_operaciones: int
  - running: bool
  --
  + __init__()
  + inicializar_sockets(): void
  + procesar_solicitud(mensaje_json: str): Dict
  + enviar_evento_a_actores(evento: Dict): void
  + manejar_solicitudes(): void
  + iniciar(): void
  + detener(): void
}

class ProcesoSolicitante {
  - context: zmq.Context
  - req_socket: zmq.Socket
  - contador_solicitudes: int
  - contador_exitosos: int
  - contador_errores: int
  --
  + __init__()
  + conectar_gestor_carga(): void
  + leer_solicitudes(archivo_solicitudes: str): List[Dict]
  + enviar_solicitud(solicitud: Dict): bool
  + procesar_solicitudes(archivo_solicitudes: str): void
  + mostrar_estadisticas(): void
  + iniciar(archivo_solicitudes: str): void
  + detener(): void
}

class ActorDevolucion {
  - context: zmq.Context
  - sub_socket: zmq.Socket
  - archivo_libros: str
  - contador_devoluciones: int
  - running: bool
  --
  + __init__(archivo_libros: str)
  + conectar_gestor_carga(): void
  + cargar_libros(): Dict
  + guardar_libros(libros: Dict): void
  + procesar_devolucion(evento: Dict): bool
  + escuchar_eventos(): void
  + iniciar(): void
  + detener(): void
}

class ActorRenovacion {
  - context: zmq.Context
  - sub_socket: zmq.Socket
  - archivo_libros: str
  - contador_renovaciones: int
  - running: bool
  --
  + __init__(archivo_libros: str)
  + conectar_gestor_carga(): void
  + cargar_libros(): Dict
  + guardar_libros(libros: Dict): void
  + procesar_renovacion(evento: Dict): bool
  + escuchar_eventos(): void
  + iniciar(): void
  + detener(): void
}

' ===================== Estructuras de Datos =====================

note as SolicitudData
**Estructura de Solicitud (Dict)**
{
  "op": "RENOVACION|DEVOLUCION",
  "libro_id": "string",
  "usuario_id": "string", 
  "sede": "string",
  "linea": int
}
end note

note as EventoData
**Estructura de Evento (Dict)**
{
  "operacion": "RENOVACION|DEVOLUCION",
  "libro_id": "string",
  "usuario_id": "string",
  "sede": "string",
  "timestamp": "string",
  "nueva_fecha_devolucion": "string" (solo renovación)
}
end note

note as RespuestaData
**Estructura de Respuesta (Dict)**
{
  "status": "OK|ERROR",
  "message": "string",
  "operacion": "string",
  "libro_id": "string"
}
end note

note as LibroData
**Estructura de Libro (JSON)**
{
  "libro_id": "string",
  "titulo": "string",
  "total_ejemplares": int,
  "ejemplares_disponibles": int,
  "ejemplares_prestados": int,
  "ejemplares": [
    {
      "ejemplar_id": "string",
      "estado": "disponible|prestado",
      "fecha_devolucion": "string|null",
      "usuario_prestamo": "string|null",
      "sede": "string|null"
    }
  ]
}
end note

' ===================== Relaciones =====================

' Comunicación entre componentes
ProcesoSolicitante --> GestorCarga : REQ/REP
GestorCarga --> ActorDevolucion : PUB/SUB (topic: devolucion)
GestorCarga --> ActorRenovacion : PUB/SUB (topic: renovacion)

' Uso de estructuras de datos
ProcesoSolicitante ..> SolicitudData : creates
GestorCarga ..> EventoData : creates
GestorCarga ..> RespuestaData : generates
ActorDevolucion ..> LibroData : updates
ActorRenovacion ..> LibroData : updates

' Acceso a archivos
ActorDevolucion --> LibroData : reads/writes JSON
ActorRenovacion --> LibroData : reads/writes JSON

' Notas
note right of GestorCarga
**Componente central**
- REQ/REP para solicitudes síncronas
- PUB/SUB para eventos asíncronos
- Coordina todo el sistema
- Puerto 5001 (REP), 5002 (PUB)
end note

note right of ProcesoSolicitante
**Cliente del sistema**
- Lee archivo de solicitudes
- Envía solicitudes síncronas
- Conecta a puerto 5001
- Maneja estadísticas
end note

note right of ActorDevolucion
**Procesador de devoluciones**
- Suscribe a topic "devolucion"
- Actualiza ejemplares disponibles
- Guarda cambios en JSON
- Conecta a puerto 5002
end note

note right of ActorRenovacion
**Procesador de renovaciones**
- Suscribe a topic "renovacion"
- Actualiza fechas de devolución
- Guarda cambios en JSON
- Conecta a puerto 5002
end note

@enduml