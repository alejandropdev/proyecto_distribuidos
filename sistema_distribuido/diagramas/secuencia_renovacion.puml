@startuml
!theme plain
title Diagrama de Secuencia - Flujo de Renovación de Libros

skinparam sequence {
  BackgroundColor LightBlue
  BorderColor DarkBlue
  ArrowColor DarkGreen
  LifeLineBackgroundColor LightYellow
  LifeLineBorderColor DarkOrange
}

participant "Proceso\nSolicitante" as PS
participant "Gestor de\nCarga" as GC
participant "Actor\nRenovación" as AR
participant "Base de\nDatos" as BD
participant "Sistema de\nLogs" as LOG

== Flujo de Renovación de Libro ==

PS -> PS : leer_solicitudes("data/solicitudes.txt")
PS -> PS : parsear_linea("RENOVACION L002 U002 SEDE_1")
PS -> PS : crear_mensaje_json()

note over PS
**Solicitud preparada**
Operación: RENOVACION
Libro: L002, Usuario: U002, Sede: SEDE_1
end note

== Comunicación REQ/REP (Síncrona) ==

PS -> GC : req_socket.send(solicitud_json) [REQ]
note right of PS
**Puerto 5001**
Patrón REQ/REP
Comunicación síncrona
end note

GC -> GC : rep_socket.recv(zmq.NOBLOCK) [REP]
GC -> GC : procesar_solicitud()
GC -> GC : json.loads(mensaje_json)
GC -> GC : validar_operacion("RENOVACION")
GC -> GC : datetime.utcnow().isoformat()
GC -> GC : (datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')

note over GC
**Evento creado**
Timestamp: 2025-01-XX
Nueva fecha: +7 días
end note

GC -> PS : rep_socket.send(respuesta_json) [REP]
PS -> PS : req_socket.recv()
PS -> PS : json.loads(respuesta_str)
PS -> LOG : log("Solicitud de renovación enviada")

note over PS
**Respuesta recibida**
Status: OK
Procesando renovación...
end note

== Comunicación PUB/SUB (Asíncrona) ==

GC -> GC : enviar_evento_a_actores()
GC -> AR : pub_socket.send_multipart([b"renovacion", evento_json]) [PUB]
note right of GC
**Puerto 5002**
Patrón PUB/SUB
Topic: "renovacion"
end note

AR -> AR : sub_socket.recv_multipart(zmq.NOBLOCK) [SUB]
AR -> AR : json.loads(datos_json)
AR -> LOG : log("Evento de renovación recibido")

== Procesamiento de Renovación ==

AR -> AR : procesar_renovacion(evento)
AR -> BD : cargar_libros()
BD --> AR : return(base_datos)

note over AR
**Base de datos cargada**
Estado actual de libros
Lista para modificar
end note

AR -> AR : buscar_libro_en_ejemplares("L002")
AR -> AR : verificar_ejemplar_prestado()

alt Si ejemplar encontrado
  AR -> AR : actualizar_fecha_devolucion()
  AR -> AR : ejemplar['fecha_devolucion'] = nueva_fecha

  note over AR
  **Fecha actualizada**
  L002: 2025-10-11 → 2025-10-18
  +7 días de renovación
  end note

  AR -> BD : shutil.copy2(archivo, backup)
  AR -> BD : guardar_libros(base_datos)
  AR -> LOG : log("Renovación procesada exitosamente")

  note over BD
  **Base de datos actualizada**
  Backup creado
  Nueva fecha persistida
  end note

else Si ejemplar no encontrado
  AR -> LOG : log("WARNING: No se encontró ejemplar prestado")
  AR -> AR : return(False)
end

== Cálculo de Fecha de Renovación ==

note over GC
**Cálculo de fecha**
Fecha actual + 7 días
Formato: YYYY-MM-DD
end note

GC -> GC : datetime.now()
GC -> GC : timedelta(days=7)
GC -> GC : strftime('%Y-%m-%d')

note over GC
**Ejemplo de cálculo**
Fecha actual: 2025-01-11
+7 días: 2025-01-18
end note

== Finalización ==

AR -> AR : incrementar_contador_renovaciones()
AR -> LOG : log("Total renovaciones: X")
PS -> PS : incrementar_contador_exitosos()

note over PS,AR
**Renovación completada**
Fecha devolución +7 días
Sistema actualizado
end note

== Casos de Error en Renovación ==

alt Si error de conexión
  PS -> GC : send(solicitud_json) [REQ]
  GC --> PS : return(timeout_error) [REP]
  PS -> LOG : log("ERROR: No se pudo conectar al GC")
  PS -> PS : incrementar_contador_errores()
end

alt Si error en cálculo de fecha
  GC -> GC : calcular_nueva_fecha_devolucion()
  GC -> GC : datetime_error
  GC -> PS : send(error_response) [REP]
  PS -> LOG : log("ERROR: Error calculando fecha")
  PS -> PS : incrementar_contador_errores()
end

alt Si error en procesamiento
  AR -> AR : procesar_renovacion(evento)
  AR -> BD : cargar_libros()
  BD --> AR : return(file_not_found_error)
  AR -> LOG : log("ERROR: No se pudo cargar BD")
  AR -> AR : incrementar_contador_errores()
end

alt Si error de validación
  GC -> GC : validar_operacion("INVALID_OP")
  GC -> PS : send(error_response) [REP]
  PS -> LOG : log("ERROR: Operación inválida")
  PS -> PS : incrementar_contador_errores()
end

== Comparación con Devolución ==

note over PS,AR
**Diferencias clave:**
• Renovación: Actualiza fecha
• Devolución: Incrementa ejemplares
• Ambos: Crean backup y log
end note

@enduml